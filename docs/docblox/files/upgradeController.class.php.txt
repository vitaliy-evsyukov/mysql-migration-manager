<?php

namespace lib;

/**
 * upgradeController
 * Обновляет базу данных до нужной ревизии
 * @author Виталий Евсюков
 */

class upgradeController extends AbstractController
{

    /**
     * Запускает основную операцию контроллера
     */
    public function runStrategy()
    {
        $initHelper = $this->container->getInit();
        $dbHelper   = $this->container->getDb();
        $fsHelper   = $this->container->getFileSystem();
        // повторение команды для базы, которую нужно проапгрейдить
        $this->db->setCommand('SET foreign_key_checks = 0');
        // подключение к временной БД
        $dbName = '';
        if ((int) $initHelper->get('tmp_add_suffix')) {
            $dbName = 'full_temp_db_' . $initHelper->get('tmp_db_name');
        }
        $db = $dbHelper->getTmpDbObject($dbName);
        // путь для сохранения временной миграции
        $path    = $fsHelper->getTempDir(
            sprintf(
                '%s_temp_migration_%d',
                $dbName,
                time()
            )
        );
        $saveDir = str_replace('\\', '/', $initHelper->get('savedir_ns'));
        $saveDir = sprintf('%s%s/', $path, $saveDir);
        $pathes  = array($path, $saveDir);
        $fsHelper->initDirs($pathes);
        set_include_path(
            implode(PATH_SEPARATOR, array(get_include_path(), $path))
        );
        $this->args['overrideRevision'] = true;
        $this->args['loadData']         = false;
        $chain                          = $initHelper->getController('deploy', $this->args, $db);
        /**
         * Для апгрейда мы должны считать временную и развернутую базу эталоном,
         * а переданную пользователем мы делаем "временной" и сравниваем
         */
        $create = $initHelper->getController('create', $this->args, $db);
        $create->getController()->setTempDb($this->db);
        // мигрировать начать нужно с нуля
        $this->args['revision']     = 0;
        $this->args['createSchema'] = false;
        /**
         * Мы должны удалить список датасетов из аргументов, т.к. во временной миграции будут созданы операторы,
         * затрагивающие все таблицы (например, указав в датасете ограниченный список таблиц, пользователь будет
         * ожидать, что выполнятся DROP TABLE для таблиц из его базы, не входящих в указанный им перечень, а если
         * выполнять операторы из временной миграции только для таблиц из датасета, очевидно, такие операторы
         * выполнены не будут)
         */
        $this->args['excludeDatasets'] = true;
        $migrate                       = $initHelper->getController(
            'migrate',
            $this->args,
            $this->db
        );
        $create->setNext($migrate);
        $chain->setNext($create);
        // подменим для контроллеров путь к миграциям
        $tempSave = array('savedir' => $saveDir);
        $chain->setSandbox(
            array(
                'schema'  => $tempSave,
                'create'  => $tempSave,
                // для migrate задаем окружение для индекса 1, т.к. индекс 0 у migrate происходит в пределах deploy
                'migrate' => array(1 => $tempSave)
            )
        );
        $chain->runStrategy();
    }

}

