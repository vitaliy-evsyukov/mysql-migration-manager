<?php

/**
 * schemaController
 * Создает и/или разворачивает схему данных
 * @author Виталий Евсюков
 */

namespace lib;

use lib\Helper\Writer\Schema;

class schemaController extends DatasetsController
{

    /**
     * Массив запросов
     * @var array
     */
    protected $queries = array();

    public function runStrategy()
    {
        $datasets   = $this->args['datasets'];
        $revision   = 0;
        $migrations = $this->container->getMigrations();
        $filesystem = $this->container->getFileSystem();
        $schema     = $this->container->getSchema();
        $database   = $this->container->getDb();
        if (isset($this->args['revision'])) {
            $revision = (int) $this->args['revision'];
        }

        $dshash = '';
        $json   = array();
        if (!empty($datasets)) {
            ksort($datasets);
            $json   = $this->loadDatasetInfo();
            $dshash = md5(implode('', array_keys($datasets)));
            $migrations->setHash($dshash);
        }
        if (isset($this->args['excludeDatasets']) && ($this->args['excludeDatasets'] === 0)) {
            $datasets = array();
        }

        if ($revision) {
            $schemaType = AbstractSchema::MIGRATED;
        } else {
            if (!empty($this->args['useOriginalSchema'])) {
                $schemaType = AbstractSchema::ORIGINAL;
            } else {
                $schemaType = null;
            }
        }

        $fname            = $filesystem->getSchemaFile($dshash, $schemaType);
        $isMigratedSchema = (strpos($fname, 'migrated') !== false);
        $message          = "Schema's file %s already exists. Do you want to override it? [%s] ";
        $checkFn          = array($schema, 'loadInstance');
        $params           = array($isMigratedSchema, $dshash, empty($this->args['notDeploy']));

        $database->setCurrentDb($this->db, 'Schema controller - check for overwrite');
        if ($filesystem->askToRewrite($fname, $message, $checkFn, $params)) {
            if (!empty($datasets)) {
                foreach ($json['reqs'] as $dataset) {
                    foreach ($dataset['tables'] as $tablename) {
                        $this->queries[$tablename] = '1';
                    }
                }
                $migrations->setTablesList($this->queries);
            }
            $this->verbose('Parsing schema files...', 1);
            $database->setCurrentDb($this->db, 'Schema controller');
            $this->queries = $schema->parseSchemaFiles($this->queries);
            $this->verbose('Parsing finished', 1);
            if (!empty($this->queries)) {
                $schemaWriter = new Schema($dshash, $this->queries, $revision);
                $filesystem->writeInFile($fname, $schemaWriter);
                if (empty($this->args['notDeploy'])) {
                    $this->queries = $this->queries['queries'];
                    // Создадим структуру базы
                    $this->verbose('Deploying schema...', 1);
                    if ((int) $this->container->getInit()->get('verbose') >= 3) {
                        $database->debugQueryMultipleDDL($this->db, $this->queries);
                    } else {
                        $database->queryMultipleDDL(
                            $this->db,
                            implode("\n", $this->queries)
                        );
                    }
                    $this->verbose('Schema deploy finished', 1);
                }
            } else {
                $this->verbose('No tables found. File is not created', 1);
            }
        } else {
            $classname = $schema->getSchemaClassName($dshash, $isMigratedSchema);
            /**
             * @var AbstractSchema $class
             */
            $class          = new $classname;
            $schemaRevision = $class->getRevision();
            if ($revision && ($revision !== $schemaRevision)) {
                $schema->changeRevision($fname, $revision);
            } else {
                $this->verbose('Set revision number to ' . $schemaRevision, 3);
                $revision = $schemaRevision;
            }
            if (empty($this->args['notDeploy'])) {
                $this->verbose('Deploying schema', 1);
                $class->load($this->db, $this->container);
                $this->verbose('Schema deploy finished', 1);
            }
        }
        /**
         * Так как мы развернули схему, можем воспользоваться ей как базой для получения начальных данных о связях таблиц
         */
        $database->setCurrentTempDb($this->db);
        $filesystem->writeRevisionFile($revision);
    }
}
