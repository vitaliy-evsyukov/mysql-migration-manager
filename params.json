{"name":"Mysql-migration-manager","tagline":"Утилита для автоматизированного создания миграций MySQL","body":"##    Mysql Migration Manager\r\n\r\nMysql Migration Manager - программа, написанная на PHP, которая позволяет __автоматически__ создавать миграции \r\nструктуры базы данных и управлять ими.\r\nВы можете разворачивать созданные другими пользователями миграции на вашей локальной машине либо на удаленном сервере, \r\nподдерживая таким образом базу в актуальном состоянии. Это полезно в условиях реальной работы множества разработчиков, \r\nкогда постоянно возникает необходимость создания новых таблиц, изменения колонок, добавления триггеров и прочих \r\nсущностей в БД.\r\nОбратите внимание, что этот способ не связан с созданием миграций в фреймворках, таких как Yii, когда программист сам \r\nдолжен описать желаемые правки в структуре данных, а скорее ближе к автоматическому созданию миграций в Doctrine, \r\nно может покрывать некоторые дополнительные нюансы работы с изменениями структуры данных в MySQL. \r\n\r\nВ условиях активной разработки на production-сервере БД может ежедневно вноситься немалое количество изменений. В этом\r\nслучае можно рассмотреть возможность выделить ответственного за процесс создания миграций, поручить это DBA или сделать\r\nавтоматизированное создание. Затем миграции можно хранить в системе контроля версий, копию файлов из которой каждый \r\nразработчик сможет получить на своем локальном ПК и развернуть. Для упрощения описания механизма работы введем  \r\nследующие термины:\r\n\r\n1. Эталонная БД. Это БД, расположенная на production-сервере. Именно с нее снимается начальный слепок схемы данных, и \r\nименно к идентичному ей состоянию должна быть приведена структура БД на локальных машинах разработчиков\r\n2. Временная БД. Это БД, расположенная на локальной машине лица, создающего новые миграции, либо на локальной машине \r\nразработчика или в целом любого окружения, где необходимо, не имея точных сведений о состоянии локальной БД, привести \r\nее к состоянию, идентичному эталонной БД. Временная БД может иметь статичное имя, либо ее может генерироваться на \r\nоснове текущего времени и префикса\r\n3. MMM - непосредственно сокращение от Mysql Migration Manager. Фактически эта программа является фронтендом к форку \r\n[mysqldiff](https://github.com/vitaliy-evsyukov/mysqldiff), программы на Perl. Об ее установке будет рассказано ниже\r\n4. Датасеты. Наборы данных находятся по умолчанию в папе datasets подмодуля data и лежат в подпапках, имена которых \r\nсобственно и являются названиями датасетов. Внутри папки должен лежать файл с параметрами датасета в формате JSON \r\nи файл с SQL-командами для вставки данных.\r\n5. SQL-файлы для построения схемы. Обычные SQL-файлы, лежащие в вашей schemadir и имеющие имена, соответствующие \r\nназваниям таблиц, описания которых в них находятся. Один файл - одна таблица.\r\n\r\n\r\nТаким образом, процесс работы может быть построен следующим образом:\r\n\r\n- автоматически или вручную снимается миграция, в это время *никаких* операций со структурой данных в БД не должно \r\nпроисходить, равно как и на втором этапе\r\n- для проверки корректности миграции следут сразу же после снятия повторить попытку создания, если создастся еще одна\r\nмиграция, это скажет о том, что обнаружен дефект в mysqldiff, который не позволил создать миграцию с таким содержимым, \r\nчто его однократное применение приведет к идентичности БД на production-сервере и на сервере, где создается временная \r\nБД, используемая для сравнения с эталонной\r\n- на машине разработчика либо на машине, где требуется развернуть БД с идентичной эталонной БД структурой, выполняется \r\nочередная полученная миграция или форсированное приведение к эталонной структуре\r\n\r\nОбращаю ваше внимание, что:\r\n\r\n- команда upgrade в большинстве случаев должна выполняться однократно, после разворачивания дампа БД, который могут \r\nпредоставить для начальной работы, либо в том случае, если отсутствует или утеряна информация о последней примененной \r\nмиграции\r\n- команда migrate должна выполняться каждый раз, когда получена новая миграция или их набор (если в течение некоторого \r\nпериода обновления не проводились, но информация о последней примененной миграции сохранена)\r\n- команда deploy должна выполняться только если стоит задача разворачивания тестовой БД с данными\r\n(для отладки или для создания некоторой песочницы)\r\n- команда init должна выполняться только на тех данных, которые не представляют ценности, так как удаляет все таблицы \r\nиз базы и создает пустые таблицы из схемы\r\n\r\n### Настройка окружения\r\n\r\n#### БД\r\n\r\nДля работы c МММ удобнее всего создать нового пользователя БД. Для упрощения настройки вы можете выдать ему \r\nвсе привилегии. Однако, если необходимо, чтобы пользователь имел только реально необходимые ему полномочия, вот они:\r\n\r\n- Для основой БД, с которой будут сниматься миграции и/или на которую они будут накладываться: \r\n`CREATE, DROP, LOCK TABLES, ALTER, DELETE, INDEX, INSERT, UPDATE, SELECT, UPDATE, TRIGGER, \r\nCREATE VIEW, SHOW VIEW, ALTER ROUTINE, CREATE ROUTINE, EXECUTE, SHOW DATABASES`\r\n- Для БД mysql: право `SELECT` на `mysql.proc`\r\n- Для временной БД: все привилегии\r\n\r\nВ примере далее будем считать, что мы устанавливаем все полномочия. Также примем за данность, что наша локальная база\r\nназывается `main_db`, эталонная - `production_main_db`, а временная БД - `mmm_tmp`.\r\n\r\nВыполните на локальном сервере БД следующие операторы (вместо pass следует использовать более безопасный пароль):\r\n\r\n```sql\r\nCREATE USER 'mmm-user'@'%' IDENTIFIED BY 'pass';\r\nGRANT ALL PRIVILEGES ON mmm_tmp.* TO 'mmm-user'@'%';\r\nGRANT ALL PRIVILEGES ON main_db.* TO 'mmm-user'@'%';\r\nGRANT SELECT ON mysq.proc TO 'mmm-user'@'%';\r\n```\r\n\r\nНа боевом сервере БД выполните следуюшие операторы:\r\n\r\n```sql\r\nCREATE USER 'mmm-user'@'%' IDENTIFIED BY 'pass';\r\nGRANT SELECT, LOCK TABLES, EXECUTE, SHOW VIEW, \r\n      TRIGGER ON production_main_db.* TO 'mmm-user'@'%'\r\nGRANT SELECT ON mysq.proc TO 'mmm-user'@'%';\r\n```\r\n\r\nВ процессе работы MMM может появиться ошибка\r\n\r\n    ERROR 1419 (HY000): You do not have the SUPER privilege and\r\n    binary logging is enabled (you *might* want to use the less safe\r\n    log_bin_trust_function_creators variable)\r\n    \r\nВ этом случае выполните команду\r\n\r\n```sql\r\nSET GLOBAL log_bin_trust_function_creators = 1;\r\n```\r\n\r\n#### mysqldiff\r\n\r\nПрограмма mysqldiff написана на Perl, репозиторий с ней является подмодулем MMM. Вы можете самостоятельно склонировать \r\nего с помощью команды \r\n\r\n`git clone https://github.com/vitaliy-evsyukov/mysqldiff`\r\n\r\nОднако более простым способом будет получение непосредственно подмодуля. В папке MMM выполните команды\r\n\r\n    git submodule init\r\n    git submodule update\r\n    \r\nВ комплекте есть скрипты установки для Windows, Debian-like систем и MacOS. \r\n\r\n##### Установка для *nix\r\n\r\nВвиду некорректных изменений \r\nв процессе апгрейда от Fedora 15 до Fedora 16 (или в случае возникновения подобных проблем под другими ОС) можно \r\nиспользовать, отредактировав, файл install_fedora.sh. В нем параметр -I должен иметь значение, равное пути, по которому \r\nинтерпретатор perl должен искать библиотеки. В моем случае я сталкивался со следующей проблемой:\r\n\r\n    perl: symbol lookup error: /usr/local/lib/perl5/auto/version/vxs/vxs.so: undefined symbol: Perl_Gthr_key_ptr\r\n\r\nВ общем случае для установки необходимы:\r\n\r\n- perl >= 5.006\r\n- Module::Build\r\n- Carp\r\n- File::Slurp\r\n- IO::File\r\n- DBI\r\n- DBD::mysql\r\n\r\nОни должны установиться автоматически скриптом установщика, однако в случае возникновения проблем можно попробовать \r\nсделать это вручную с помощью команд:\r\n\r\n    $ sudo cpan Module::Build && cpan Carp && cpan File::Slurp && cpan IO::File && cpan DBI && cpan DBD::mysql\r\n    $ sudo apt-get install libmysqlclient-dev\r\n    \r\nАвтоматическая установка для Debian-like систем производится путем запуска скрипта `install_windows_debian.sh`\r\n    \r\nДля установки при наличии Percona Server на Fedora вместо \"штатного\" mysql необходимо установить пакет \r\nPercona-Server-devel с помощью команды\r\n\r\n    $ yum install Percona-Server-devel-55\r\n    \r\n##### Установка для Windows\r\n\r\nДля установки под Windows (тестировалось на Windows 7 Ultimate x64) необходимо скачать пакет \r\n[ActivePerl](http://www.activestate.com/activeperl/downloads). Даже если у вас 64-разрядная ОС, необходимо установить \r\nx86 версию, поскольку на момент написания не существует способа установить MinGW \"из коробки\" для версии под \r\n64-разрядные ОС.После установки откройте Perl Package Manager, выберите в меню View пункт All Packages, найдите в \r\nсписке и установите MinGW (для этого нужно щелкнуть правой кнопкой по MinGW, выбрать единственный пункт меню и \r\nвыполнить `File -> Run marked actions...`). Затем перейдите в папку с исходными кодами mysqldiff и выполните команду \r\n\r\n    perl Build.PL\r\n     \r\nЕсли вы получите сообщение, что требуются зависимости, выполните \r\n\r\n    perl Build installdeps \r\n    \r\nи затем снова \r\n\r\n    perl Build.PL\r\n    \r\nПосле этого выполните \r\n\r\n    perl Build\r\n    perl Build install.\r\n\r\nПо умолчанию mysqldiff установится как `C:\\Perl\\site\\bin\\mysqldiff`.\r\n\r\n##### Установка для MacOS\r\n\r\nИспользуя штатный Perl:\r\n\r\n    sudo cpan install Module::Build\r\n    sudo cpan install Carp\r\n    sudo cpan install File::Slurp\r\n    sudo cpan install IO::File\r\n    sudo cpan install DBI\r\n    sudo cpan install DBD::mysql\r\n    \r\nИспользя Brew: так же, но без `sudo`.\r\n\r\n### Настройка MMM\r\n\r\nМММ использует один файл конфига для одной базы данных. Скопируйте дефолтный файл `config.ini.tpl` с другим именем. \r\nУдобной практикой будет создание конфигов с именем БД в названии, например, `config_main_db.ini`. По умолчанию будет \r\nиспользован файл конфига с именем `config.ini`. Это поведение может быть изменено путем передачи опции `config` в \r\nкомандной строке со значением в виде пути к желаемому конфигурационному файлу.\r\n\r\nВсе указанные в конфиге настройки могут быть перекрыты опциями с такими же именем, кроме опций из секции `replace`.\r\nНиже будет приведен пример файла конфига, а описание опций будет указано в виде `--<опция>`. \r\nВ командной строке опции следует передавать в формате `--<опция>=<значение>`. \r\n\r\n#### Пример конфига\r\n\r\n```ini\r\n[main]\r\nhost=production.server.com\r\nuser=mmm-user\r\npassword=pass\r\ndb=production_main_db\r\ncachedir=main_db_data/cache\r\nsavedir=main_db_data/migrations\r\ndatasetsdir=main_db_data/datasets\r\nschemadir=sotm-db-data/schema\r\nreqtables=tables.json\r\nreqdata=data.sql\r\nroutine_user=`root`@`%`\r\nversionfile=revisions.txt\r\nversion_marker=marker.txt\r\nverbose=3\r\nmysqldiff_command=\"mysqldiff --logs-folder=/var/log/mysqldiff\"\r\n\r\n[tmpdb]\r\ntmp_db_name=mmm_tmp\r\ntmp_add_suffix=0\r\ntmp_host=localhost\r\ntmp_user=mmm-user\r\ntmp_password=pass\r\n```\r\n\r\nДанный конфиг может быть использован для съема миграций, однако для применения их на локальной БД достаточно лишь \r\nизменить данные подключения и имя базы на локальные.\r\n\r\n#### Описание параметров\r\n\r\nСекция `main` предназначеня для описания основных параметров:\r\n\r\n     --host                  Имя хоста сервера БД\r\n     --user                  Имя пользователя\r\n     --password              Пароль\r\n     --port                  Порт подключения к БД, по умолчанию 3306\r\n     --db                    Название БД\r\n     --savedir               Путь к директории, в которой будут сохраняться \r\n                             файлы миграций\r\n     --cachedir              Путь к директории, в которой будут сохраняться файлы схем\r\n     --datasetsdir           Путь к директории с наборами данных\r\n     --schemadir             Путь к директории с начальными описаниями таблиц\r\n     --reqtables             Файл в формате JSON, в котором хранится \r\n                             список нужных для набора данных таблиц\r\n     --reqdata               Файл с SQL-командами для набора таблиц\r\n     --versionfile           Файл, в котором будет храниться информация о миграциях\r\n     --version_marker        Файл, в которой хранится информация о последней \r\n                             примененной миграции\r\n     --mysqldiff_command     Команда для запуска mysqldiff. Должна содержать параметр \r\n                             с путем к логам (--logs-folder). По умолчанию логи будут \r\n                             созданы в папке, в которую установлен mysqldiff, и у \r\n                             текущего пользователя может не быть прав на запись в нее\r\n     --verbose               Уровень отладки. \r\n                             Отладочные сообщения будут выводиться, только если он \r\n                             больше либо равен уровню, с которым выводится \r\n                             отладочное сообщение\r\n     --quiet                 Отключает вывод всех сообщений, за исключением ошибок\r\n     --routine_user          Устанавливает пользователя, который будет использован как \r\n                             значение DEFINER у триггеров, хранимых процедур и функций\r\n                             \r\nВ секции `tempdb` должны содержаться следующие значения:\r\n\r\n     --tmp_add_suffix        Если значение кастуется к логической истине, то имена \r\n                             временных БД будуть заканчиваться суффиксом в виде \r\n                             метки времени UNIX. \r\n                             При апгрейде суффиксом имени будет само название временной \r\n                             БД, а начальной частью имени - строка 'full_temp_db_'\r\n     --tmp_db_name           Имя временной БД, в которой будет производиться поиск \r\n                             связей и в которой будут разворачиваться миграции и \r\n                             схема для сравнения. Если tmp_add_suffix не указан или \r\n                             может быть приведен к логическому значению ЛОЖЬ, то к \r\n                             имени не будет ничего добавлено, таким образом, вы \r\n                             обеспечите статичность имени временной БД. \r\n                             Это полезно, если ваши права на сервере БД ограничены, \r\n                             так как администратору БД необходимо будет выдать \r\n                             права только на две базы данных, оригинальную и временную\r\n     --tmp_host              Хост, на котором будет развернута временная БД\r\n     --tmp_user              Имя пользователя на этом хосте\r\n     --tmp_password          Пароль пользователя на этом хосте\r\n     --tmp_port              Порт БД на этом хосте\r\n     \r\nВ секции `replace` конфигурация должна выглядеть следующим образом:\r\n\r\n```ini\r\n[replace]\r\ndatabase.production_main_db=main_db\r\ndatabase.some_another_production_db=some_local_db\r\n```\r\n\r\nКаждый элемент должен начинаться с подстроки `database.`, следующая часть имени значения - название БД, которую \r\nтребуется заменить при нахождении в хранимых процедурах, функциях, триггерах, внешних ключах и т.п. Как правило, эту \r\nсекцию можно опустить, однако, если в эталонной БД есть захардкоженное наименование ее названия или названия других \r\nбаз данных, которых нет на локальной машине (напомним, в нашем примере аналогичная эталонной БД база \r\nназвана `main_db`), при накатке миграций его нужно автоматически заменять. Эту цель и преследует данная опция. \r\n\r\n### Команды\r\n\r\nДля запуска MMM убедитесь, что в переменной окружения Path прописан путь к PHP-интерпретатору. Однако можно запускать \r\nкоманду и непосредственно передавая на вход интерпретатору файл `migration.php`.\r\n\r\nПосле установки вам требуется выполнить настройку MMM, отредактировав конфигурационный файл программы.\r\nКраткую справку по программе вы можете получить, запустив программу с параметром help:\r\n\r\n`php migration.php help`\r\n\r\n#### Апгрейд существующей базы данных\r\nЕсли у вас есть база данных, на которую никогда не накатывались миграции (либо вы не уверены, в каком состоянии \r\nнаходится эта база), вы наверняка захотите ввести ее в нормальный цикл работы с миграциями. \r\nДля этого вам необходимо сделать апгрейд, который выполнит накатку временной базы из существующих миграций, \r\nсравнит вашу базу со временной и выполнит одну \"специальную\" миграцию, которая приведет вашу БД к состоянию последней \r\nревизии. Нужно обратить внимание, что в процессе накатывания миграции возможны ошибки как из-за имеющихся в вашей БД \r\nданных (например, таблица с неуникальными значениями в определнном поле в результате миграций должна получить \r\nуникальный индекс на это поле), так и ввиду возможных проблем с DDL. Все ошибки выводятся на экран по умолчанию.\r\n\r\nДля выполнения апгрейда выполниет команду\r\n\r\n`php migration.php upgrade`\r\n\r\nАпгрейд, как правило, занимает продолжительное время. После окончания апгрейда вы можете просто мигрировать до новых \r\nмиграций при появлении таких в репозитарии. По окончании апгрейда в вашем marker.txt будет номер последней ревизии.\r\n\r\n#### Схема\r\n\r\n`php migration.php schema`\r\nПри запуске этой команды без параметров MMM пройдется по вашей schemadir и сохранит содержимое файлов в \"кеше\" - файле \r\nсхемы (Schema.class.php), после чего применит эти данные на нужной вам базе. Вы можете указать параметр \r\n`--datasets=\"список датасетов через запятую\"`, чтобы получить схему только тех таблиц, которые описаны в нужном вам \r\nдатасете. В этом случае имя файла схемы будет иметь вид `SchemaХЕШ.class.php`, где `ХЕШ` - md5 от конкатенированной \r\nотсортированной в алфавитном порядке последовательности имен датасетов.\r\n\r\n##### Пример файла описания датасета\r\n\r\nФайл, согласно нашему примерному конфигу, может находиться здесь: `main_db_data/datasets/main/tables.json`. Здесь \r\n`tables.json` - обязательное наименование файла, `main_db_data/datasets` - значение параметра `datasetsdir` из конфига, \r\nа `main` - собственно название датасета и при ином наименовании папки может будет равным этому наименованию.\r\n\r\n```json\r\n{\r\n    \"tables\" : [\r\n        \"table1\",\r\n        \"table2\",\r\n        \"table3\"\r\n    ]\r\n}\r\n```\r\n\r\n##### Пример данных датасета\r\n\r\nФайл аналогично файлу описания датасета должен называться `data.sql` и должен находиться в \r\n`main_db_data/datasets/main/data.sql`. Его содержимым могут быть любые SQL-операторы (обычно `INSERT`'ы для собственно \r\nнаполнения БД).\r\n\r\n```sql\r\nINSERT INTO table1 VALUES (1, 'a', 38.45);\r\nINSERT INTO table3 VALUES (100, 1);\r\n```\r\n\r\n#### Снятие ревизии\r\n\r\n`php migration.php create`\r\n\r\nЭта команда не имеет параметров. Она исполнит `mysqldiff` и запишет изменения, которые он выдаст, в файле в нужном \r\nформате. Файлы имеют имена вида `MigrationНОМЕР.class.php`, где `НОМЕР` - идентификатор миграции. Все миграции \r\nзаписываются в файл, описываемый параметром `versionfile`. Если он утерян, то миграции не могут быть воспроизведены, \r\nпоэтому для его восстановления используйте команду\r\n\r\n`php migration.php recover`\r\n\r\nСозданный файл ревизии следует по\r\n\r\n#### Миграции\r\nКогда вы имеете в распоряжении файлы миграций, вы можете откатиться до нужной миграции или же накатить миграции. \r\n\r\n`php migration.php migrate`\r\n\r\nБез параметров эта команда накатит вам все миграции от текущей. Текущая миграция берется из файла, описываемого \r\nпараметром `version_marker`. Если по каким-либо причинам это нужно изменить, используйте параметр \r\n`--revision=\"номер текущей миграции\"`, либо напрямую изменить содержимое данного файла. Этот файл не следует \r\nотправлять в систему контроля версий, поскольку другим участникам не должно быть известно, с какой версией базы вы \r\nработаете.\r\nДля указания точной миграции, к которой нужно перейти, используйте параметр `--m=\"число\"`, в противном случае \r\nиспользуйте значение этого параметра из списка тех, которые может принимать на вход php-функция `strtotime`.\r\n\r\nНапример, вы желаете накатить миграции с 3-ей по 27-ю. В таком случае выполните команду\r\n\r\n`php migration.php migrate --revision=3 --m=27`\r\n\r\nВ случае, если вы хотите откатиться с текущей (к примеру, 190-й миграции, однако это не играет никакой роли) до \r\nболее старой, например, 137-й, выполните\r\n\r\n`php migration.php migrate --m=137`\r\n\r\nСписок миграций и текущую миграцию вы можете увидеть, выполнив команду\r\n\r\n`php migration.php list`\r\n\r\n#### Применение наборов данных\r\n\r\n`php migration.php applyds --datasets=\"набор данных\"`\r\n\r\nЭта команда выполняет вставки данных из датасетов. Параметр `--datasets` должен быть указан обязательно.\r\n\r\n#### Деплой\r\n\r\n`php migration.php deploy`\r\n\r\nРазворачивание выполнит следующие действия по порядку: создание и разворачивание схемы, миграции (до последней, \r\nесли не указано иное) и разворачивание наборов данных. Будьте внимательны: \r\n__эта команда уничтожит все таблицы в вашей БД!__\r\nВы можете указать датасеты, которые нужно развернуть, и дать указания по поводу того, до какой миграции нужно обновить \r\nструктуру БД.\r\n\r\n#### Возврат к схеме\r\n\r\nИногда нужно выполнить возврат к схеме, которая была создана. Используйте для этого \r\n\r\n`php migration.php init`\r\n\r\nВы также можете указать, для каких датасетов будет развернута схема.\r\n\r\n#### Проверка актуальности состояния локальной БД\r\n\r\nЕсли вы хотите просто узнать, не выполняя никаких изменений в БД, насколько она отличается от эталонной, вы можете \r\nсделать это с помощью команды \r\n\r\n`php migration.php verify`\r\n\r\nНа экране появится набор полученных различий либо информация о том, что отличий не обнаружено.\r\n\r\n#### Очистка\r\n\r\nДля удаления временных баз данных, которые могли остаться, к примеру, после аварийного завершения работы,\r\nиспользуйте команду\r\n\r\n`php migration.php gc`\r\n\r\nВсе временные БД будут удалены.","google":"UA-63059909-1","note":"Don't delete this file! It's used internally to help with page regeneration."}